// function sum(a, b) {
// return a + b;
// }

// sum(10, "20"); // 결과값이 1020 이런 식으로 출력될거임.

// var res = sum(10, 20);
// res.toLocaleString();
// js 는 ts와 달리 결과값이 저장된 변수 res 의 타입을
// 인식하지 못하기 때문에, res 에 number 가 저장이 되었다고 해도,
// . 만 찍는다고 해서 number 와 관련된 api가 뜨지는 않음.
// -> api 오탈자 입력해서 에러가 발생할 수도 있겠지?

// 자바스크립트를 타입스크립트처럼 사용할 수 있는 방법

// app.js 에서 했듯이 js 코멘트를 이용해서 파라미터 타입 정의 가능.
// 저기에 '첫번째 숫자' 이렇게 써주면 타입 외에 추가적인 함수의 사용 방법까지 작성해줄 수 있음.
// 그러나 저런 식으로 js 주석들을 이용해서 타입들을 일일이 작성해 나가는건 손이 너무 많이 가는 단점이 있음.
// 그래서 차라리 ts 를 쓰는게 가독성도 좋아지고 코드의 양도 줄어들 수 있는 것.

// @ts-check
/**
 *
 * @param {number} a 첫번째 숫자
 * @param {number} b 두번째 숫자
 */
function sum(a, b) {
  return a + b;
}
// sum(10, 20);
sum(10, "20"); // 그러나 안타깝게도 이런 방식은 .ts 에서와 달리 저 '20' 이 잘못됬다고 어디에서도 알려주지 않음.
// 콘솔에 찍거나 직접 실행을 해봐야 잘못된 줄 알겠지..
// 이걸 해주려면 코드 위쪽에 @ts-check 라는 주석을 달아주고 저장하면 마치 ts 를 쓰는 것처럼 작동하기는 함.
